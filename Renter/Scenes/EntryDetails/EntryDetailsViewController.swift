//
//  EntryDetailsViewController.swift
//  Renter
//
//  Created by Oleg Efimov on 17.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EntryDetailsDisplayLogic: AnyObject {
    func displayEntry(viewModel: EntryDetails.GetEntry.ViewModel)
    func displayAlert(viewModel: EntryDetails.RemoveEntry.ViewModel)
    func dismissScreen()
}

class EntryDetailsViewController: UIViewController {
    
    var interactor: EntryDetailsBusinessLogic?
    
    var router: (NSObjectProtocol & EntryDetailsRoutingLogic & EntryDetailsDataPassing)?
    
    private var sections = [EntrySectionViewModel]()

    private let tableView: UITableView = {
        let tableView = UITableView()
        tableView.register(EntryDetailsTableViewCell.self,
                           forCellReuseIdentifier: EntryDetailsTableViewCell.identifier)
        tableView.separatorStyle = .none
        tableView.allowsSelection = false
        return tableView
    }()

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        view.backgroundColor = .systemBackground
        
        configureViews()
        passEntryRequest()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        layoutViews()
    }

    
    // MARK: - request data from EntryDetailsInteractor

    func passEntryRequest() {
        let request = EntryDetails.GetEntry.Request()
        interactor?.getEntry(request: request)
    }

    // MARK: Common
    
    private func configureViews() {
        tableView.delegate = self
        tableView.dataSource = self
        
        view.addSubview(tableView)
    }

    private func layoutViews() {
        tableView.frame = view.bounds
    }
    
}

// MARK: EntryDetailsDisplayLogic
extension EntryDetailsViewController: EntryDetailsDisplayLogic {
    
    func displayAlert(viewModel: EntryDetails.RemoveEntry.ViewModel) {
        let alert = ComponentFactory.shared.produceUIAlert(
            with: viewModel.title,
            message: viewModel.message,
            action: UIAlertAction(title: "Delete",
                                  style: .destructive,
                                  handler: { [weak self] _ in
                                      self?.interactor?.deleteEntry()
                                  }))
        
        present(alert, animated: true)
    }
    
    func dismissScreen() {
        router?.routeToHistory()
    }
    
    // MARK: - display view model from EntryDetailsPresenter

    func displayEntry(viewModel: EntryDetails.GetEntry.ViewModel) {
        sections = viewModel.sections
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }

}


extension EntryDetailsViewController: UITableViewDelegate, UITableViewDataSource {
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return sections.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return sections[section].rows.count
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return EntryDetailsHeaderView(title: sections[section].title)
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        if section == sections.count - 1 {
            let footerView = EntryDetailsFooterView(frame: .zero)
            footerView.delegate = self
            return footerView
        }
        return nil
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 38
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(
            withIdentifier: EntryDetailsTableViewCell.identifier,
            for: indexPath) as? EntryDetailsTableViewCell
        else {
            return UITableViewCell()
        }
        
        let viewModel = sections[indexPath.section].rows[indexPath.row]
        cell.configure(with: viewModel)
        return cell
    }
}

// MARK: EntryDetailsFooterViewDelegate
extension EntryDetailsViewController: EntryDetailsFooterViewDelegate {
    func entryDetailsFooterViewDidTapCloseButton() {
        router?.routeToHistory()
    }
    
    func entryDetailsFooterViewDidTapDeleteButton() {
        interactor?.askToDelete()
    }
    
    
}
