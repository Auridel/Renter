//
//  CreateNewEntryViewController.swift
//  Renter
//
//  Created by Oleg Efimov on 16.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateNewEntryDisplayLogic: AnyObject {
    func displayCurrentPlan(viewModel: CreateNewEntry.GetMeters.ViewModel)
    func displayTransactionStatus(viewModel: CreateNewEntry.SaveNewEntry.ViewModel)
}

class CreateNewEntryViewController: UIViewController, CreateNewEntryDisplayLogic {
    var interactor: CreateNewEntryBusinessLogic?
    var router: (NSObjectProtocol & CreateNewEntryRoutingLogic & CreateNewEntryDataPassing)?

//
//    // MARK: - Routing
//
//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "Create New Entry"
        
        view.backgroundColor = .systemBackground
        
        getCurrentPlan()
    }
    
    //MARK: - receive events from UI
    
    
    
    // MARK: - request data from CreateNewEntryInteractor

    func getCurrentPlan() {
        let request = CreateNewEntry.GetMeters.Request()
        interactor?.getCurrentPlanData(request: request)
    }

    func passCreateNewEntryRequest() {
//        let request = CreateNewEntry.SaveNewEntry.Request()
//        interactor?.createNewEntry(request: request)
    }

    // MARK: - display view model from CreateNewEntryPresenter

    func displayCurrentPlan(viewModel: CreateNewEntry.GetMeters.ViewModel) {
        //nameTextField.text = viewModel.name
    }

    func displayTransactionStatus(viewModel: CreateNewEntry.SaveNewEntry.ViewModel) {
        // do sometingElse with viewModel
    }
}
