//
//  HistoryViewController.swift
//  Renter
//
//  Created by Oleg Efimov on 16.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HistoryDisplayLogic: AnyObject {
    func displayHistory(viewModel: History.GetHistoryData.ViewModel)
    func displayFiltredHistory(viewModel: History.FilterData.ViewModel)
}

class HistoryViewController: UIViewController {
    
    var interactor: HistoryBusinessLogic?
    
    var router: (NSObjectProtocol & HistoryRoutingLogic & HistoryDataPassing)?
    
    public var currentIndexPath: [IndexPath]? {
        collectionView?.indexPathsForSelectedItems
    }
    
    private var rows = [HistoryRowViewModel]()
    
    private var collectionView: UICollectionView?
    
    private let noDataLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 24)
        label.text = "You don't have any bills yet..."
        label.isHidden = false
        label.textColor = .secondaryLabel
        label.textAlignment = .center
        label.sizeToFit()
        return label
    }()
    
    // MARK: - View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        HistoryConfigurator.shared.configure(with: self)
        
        title = "History"
        navigationController?.navigationBar.prefersLargeTitles = true
        navigationItem.rightBarButtonItem = UIBarButtonItem(
            barButtonSystemItem: .add,
            target: self,
            action: #selector(didTapAddButton))
        
        view.backgroundColor = .secondarySystemBackground
        
        //        tableView.transform = CGAffineTransform(rotationAngle: -(CGFloat)(Double.pi))
        
        configureViews()
        passHistoryRequest()
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        collectionView?.frame = view.bounds
        noDataLabel.center = view.center
    }
    
    //MARK: - receive events from UI
    
    @objc private func didTapAddButton() {
        router?.routeToCreateNewEntry()
    }
    
    // MARK: - request data from HistoryInteractor
    
    func passHistoryRequest() {
        let request = History.GetHistoryData.Request()
        interactor?.getHistory(request: request)
    }
    
    func passFilterRequest() {
        //        let request = History.FilterData.Request()
        //        interactor?.getFiltredHistory(request: request)
    }
    
    // MARK: Common
    
    private func configureViews() {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.minimumLineSpacing = 10
        layout.minimumInteritemSpacing = 10
        layout.itemSize = CGSize(width: view.width - 32, height: 80)
        self.collectionView = UICollectionView(frame: .zero,
                                               collectionViewLayout: layout)
        
        guard let collectionView = collectionView else {
            return
        }
        
        collectionView.backgroundColor = .tertiarySystemBackground
        collectionView.register(
            HistoryCollectionViewCell.self,
            forCellWithReuseIdentifier: HistoryCollectionViewCell.identifier)
        collectionView.isHidden = true
        
        collectionView.delegate = self
        collectionView.dataSource = self
        
        view.addSubview(collectionView)
        view.addSubview(noDataLabel)
    }
}

// MARK: HistoryDisplayLogic
extension HistoryViewController: HistoryDisplayLogic {
    
    // MARK: - display view model from HistoryPresenter
    
    func displayHistory(viewModel: History.GetHistoryData.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.rows = viewModel.rows
            guard let collectionView = self?.collectionView,
                  let noDataLabel = self?.noDataLabel
            else { return }
            if viewModel.rows.count != 0 {
                noDataLabel.isHidden = true
                collectionView.isHidden = false
                collectionView.reloadData()
            } else {
                collectionView.isHidden = true
                noDataLabel.isHidden = false
            }
        }
    }
    
    func displayFiltredHistory(viewModel: History.FilterData.ViewModel) {
        // do sometingElse with viewModel
    }
}

extension HistoryViewController: UICollectionViewDelegate, UICollectionViewDataSource {
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        rows.count
    }
    
    
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(
            withReuseIdentifier: HistoryCollectionViewCell.identifier,
            for: indexPath) as? HistoryCollectionViewCell
        else {
            return UICollectionViewCell()
        }
        
        let viewModel = rows[indexPath.row]
        cell.configure(with: viewModel)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToEntryDetails()
        collectionView.deselectItem(at: indexPath, animated: true)
    }
    
}

