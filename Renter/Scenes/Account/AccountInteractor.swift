//
//  AccountInteractor.swift
//  Renter
//
//  Created by Oleg Efimov on 16.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountBusinessLogic {
    func getUser(request: Account.ShowUser.Request)
    func updateUserName(request: Account.SaveUser.Request)
    func presentSignOutAlert()
    func signOutUser()
}

protocol AccountDataStore {
    var user: User? { get set }
}

class AccountInteractor: AccountBusinessLogic, AccountDataStore {
    
    var presenter: AccountPresentationLogic?
    
    var user: User?
    
    // MARK: Do something (and send response to AccountPresenter)
    
    func getUser(request: Account.ShowUser.Request) {
        guard let user = AuthManager.shared.getUser()
        else { return }
        self.user = user
        presenter?.presentUser(response: Account.ShowUser.Response(user: user))
    }
    
    func updateUserName(request: Account.SaveUser.Request) {
        guard !request.name.isEmpty
        else {
            presenter?.presentErrorAlert(with: "Name cannot be empty!")
            return
        }
        
        ApiManager.shared.changeUsername(request.name) { [weak self] isSuccess in
            if isSuccess {
                AuthManager.shared.updateUserName(with: request.name)
                if let user = AuthManager.shared.getUser() {
                    self?.presenter?.presentUpdatedUsername(response: Account.SaveUser.Response(user: user))
                    return
                }
            }
            self?.presenter?.presentErrorAlert(with: "Failed to change name")
        }
    }
    
    func signOutUser() {
        AuthManager.shared.signOut()
    }
    
    func presentSignOutAlert() {
        presenter?.presentSignOutAlert()
    }
}
