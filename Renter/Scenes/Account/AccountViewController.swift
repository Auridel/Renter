//
//  AccountViewController.swift
//  Renter
//
//  Created by Oleg Efimov on 16.01.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountDisplayLogic: AnyObject {
    func displayUser(viewModel: Account.ShowUser.ViewModel)
    func displayUpdatedUsername(viewModel: Account.SaveUser.ViewModel)
}

class AccountViewController: UIViewController, AccountDisplayLogic {
    var interactor: AccountBusinessLogic?
    var router: (NSObjectProtocol & AccountRoutingLogic & AccountDataPassing)?

//    // MARK: - Routing
//
//    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
//        if let scene = segue.identifier {
//            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
//            if let router = router, router.responds(to: selector) {
//                router.perform(selector, with: segue)
//            }
//        }
//    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        title = "Account"
        view.backgroundColor = .systemBackground
        
        AccountConfigurator.shared.configure(with: self)
        
        passUserRequest()
    }
    
    //MARK: - receive events from UI
    
    
    // MARK: - request data from AccountInteractor

    func passUserRequest() {
        let request = Account.ShowUser.Request()
        interactor?.getUser(request: request)
    }

    func passUpdateNameRequest() {
//        let request = Account.SomethingElse.Request()
//        interactor?.updateUser(request: request)
    }

    // MARK: - display view model from AccountPresenter

    func displayUser(viewModel: Account.ShowUser.ViewModel) {
        //nameTextField.text = viewModel.name
    }

    func displayUpdatedUsername(viewModel: Account.SaveUser.ViewModel) {
        // do sometingElse with viewModel
    }
}
